// Copyright SECURRENCY INC.
// SPDX-License-Identifier: MIT

pragma solidity >=0.7.0 <0.9.0;
pragma experimental ABIEncoderV2;

import "remix_tests.sol"; // this import is automatically injected by Remix.

/// File containe 3 smart contracts.
/// - TestTask for tasks solutions (2 task to be solved)
/// - Task1Test tests for task 1
/// - Task2Test tests for task 2

/// To check your's results, please deploy a smart contract with tests related to
/// to the task and run a functions. Each call will emit an event with test details.
/// To be sure that your solution work's properly, pay your attention to the
/// "passed" field in the log output, it must be equal to "true".
/// "passed": true - expected result for all tests.


/**
 * @title Solidity test task 1
 */
contract TestTask {
    
    ///             ///
    ///    Task 1   ///
    ///             ///
    
    /**
     * @dev Test task condition:
     * @dev by a condition, a function getString accepts some template
     * @dev and we agreed that {account} in the template must be 
     * @dev replaced by an "account" variable from the function,
     * @dev "{number}" must be replaced by a "number" variable
     * @dev Example
     * @dev template = "Example: {account}, {number}"
     * @dev result = "Example: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c, 1250"
     * 
     * @notice You can see more examples in a tests.
     * 
     * @return result Updated template by a task condition
     */
    function buildStringByTemplate(string calldata template) external pure returns (string memory) {
        // 0x4549502d3535
        address account = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c;
        uint number = 1250;
        string memory result;
        
        /**
         * Write your code here
         * Try to do with the lowest gas consumption.
         * If you will use some libraries or ready solutions,
         * please add links in the "notice" comments section before the function.
         */
        
        return result;
    }
    
    ///             ///
    ///    Task 2   ///
    ///             ///
    
    /**
     * @dev Test task condition 2:
     * 
     * @dev Write a function which takes an array of strings as input and outputs 
     * @dev with one concatenated string. Function also should trim mirroring characters
     * @dev of each two consecutive array string elements. In two consecutive string elements
     * @dev "apple" and "electricity", mirroring characters are considered to be "le" and "el"
     * @dev and as a result these characters should be trimmed from both string elements,
     * @dev and concatenated string should be returned by the function. You may assume that
     * @dev array will consist of at least of one element, each element won't be an empty string.
     * @dev You may also assume that each element will contain only ascii characters.
     * 
     * @dev Example 1
     * @dev input:  "apple", "electricity", "year"
     * @dev output: "appectricitear"
     * 
     * @notice You can see more examples in a Task2Test smart contract.
     * 
     * @return result Minimized string by a task condition
     */
     function trimMirroringChars(string[] memory data) public pure returns (string memory) {
         string memory result;
         
         /**
         * Write your code here
         * Try to do with the lowest gas consumption.
         * If you will use some libraries or ready solutions,
         * please add links in the "notice" comments section before the function.
         */
         
         return result;
     }
}

/**
 * @title Task 1 tests
 * 
 * @notice Designed for the remix IDE, please use it for tests.
 */
contract Task1Test {
    TestTask task;
    constructor () public {
       task = new TestTask();
    }
    
    /**
     * @dev Test task result
     * @dev template 1: "Result: {account}, {number}"
     *                  "Result: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c, 1250"
     */
    function checkTemplate1() public {
        Assert.equal(
            task.buildStringByTemplate("Result: {account}, {number}"),
            "Result: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c, 1250",
            "Result is equal to 'Result: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c, 1250'"
        );
    }
    
    /**
     * @dev Test task result
     * @dev template 2: "number: {number}, account: {account}"
     * @dev             "number: 1250, account: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c"
     */
    function checkTemplate2() public {
        Assert.equal(
            task.buildStringByTemplate("number: {number}, account: {account}"),
            "number: 1250, account: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c",
            "Result is equal to 'number: 1250, account: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c'"
        );
    }
    
    /**
     * @dev Test task result
     * @dev template 3: "number: {number}, number: {number}"
     * @dev             "number: 1250, number: 1250"
     */
    function checkTemplate3() public {
        Assert.equal(
            task.buildStringByTemplate("number: {number}, number: {number}"),
            "number: 1250, number: 1250",
            "Result is equal to 'number: 1250, number: 1250'"
        );
    }
    
    /**
     * @dev Test task result
     * @dev template 4: "account: {account}, account: {account}"
     * @dev             "account: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c, account: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c"
     */
    function checkTemplate4() public {
        Assert.equal(
            task.buildStringByTemplate("account: {account}, account: {account}"),
            "account: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c, account: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c",
            "Result is equal to 'account: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c, account: 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c'"
        );
    }
}

/**
 * @title Task 2 tests
 * 
 * @notice Designed for the remix IDE, please use it for tests.
 */
contract Task2Test {
    TestTask task;
    constructor () public {
       task = new TestTask();
    }
    
    /**
     * @dev Test task result
     * @dev input ["apple", "electricity", "year"]
     * @dev output "appectricityear"
     */
     function checkCase1() public {
         string[] memory words = new string[](3);
         words[0] = "apple";
         words[1] = "electricity";
         words[2] = "year";
         
         Assert.equal(
            task.trimMirroringChars(words),
            "appectricitear",
            "Result is equal to 'appectricityear'"
        );
     }
     
     /**
     * @dev Test task result
     * @dev input ["ethereum", "museum", "must", "street"]
     * @dev output "etheresereet"
     */
     function checkCase2() public {
         string[] memory words = new string[](4);
         words[0] = "ethereum";
         words[1] = "museum";
         words[2] = "must";
         words[3] = "tree";
         
         Assert.equal(
            task.trimMirroringChars(words),
            "etheresesree",
            "Result is equal to 'etheresereet'"
        );
     }
}

    ///             ///
    ///    Task 3   ///
    ///             ///

/**
 * Test task "Investor registration"
 * A gas usage optimization
 * 
 * function "setLeadInvestorForARound" need to be optimized by a gas usage.
 * current transaction cost > 140 000
 * expected transaction cost < 55 000
 * 
 * Required to save the interface. 
 * All other modifications are allowed.
 **/
contract GasUsageOptimisation {
    uint public investmentRound = 1;
    
    // investment round => investors
    mapping(uint=>address) investors;
    // investment round => deposited Amount
    mapping(uint=>uint64) deposits;
    // investment round => age
    mapping(uint=>uint8) investorsAge;
    // investment round => kyc
    mapping(uint=>bool) kyc;
    // investment round => verification status
    mapping(uint=>bool) verificationStatus;
    // investment round => US resident
    mapping(uint=>bool) USResident;
    
    /**
     * @notice Lead investor registration
     * 
     * @param investor A lead investor address
     * @param depositAmount The amount deposited by a investor
     * @param age Investor age
     * @param kycStatus Investor KYC status
     * @param isVerifiedInverstor Investor verification status
     * @param isUSResident Resident status
     **/
    function setLeadInvestorForARound(
        address investor,
        uint64 depositAmount,
        uint8 age,
        bool kycStatus,
        bool isVerifiedInverstor,
        bool isUSResident
    )
        external
    {
        require(investor != address(0x00), "Invalid investor address");
        require(depositAmount > 0, "A deposint amount should be more than zero");
        require(age > 18, "The investor should be adult");
        
        investors[investmentRound] = investor;
        deposits[investmentRound] = depositAmount;
        investorsAge[investmentRound]  = age;
        kyc[investmentRound] = kycStatus;
        verificationStatus[investmentRound] = isVerifiedInverstor;
        USResident[investmentRound] = isUSResident;
        
        investmentRound++;
    }
    
    /**
     * @notice Returns a lead investor details
     **/
    function getInvestorDetailsByInvestmentRound(
        uint round
    )
        external
        view
        returns (
            address investor,
            uint64 depositAmount,
            uint8 age,
            bool kycStatus,
            bool isVerifiedInverstor,
            bool isUSResident
        )
    {
        return (
            investors[round],
            deposits[round],
            investorsAge[round],
            kyc[round],
            verificationStatus[round],
            USResident[round]
        );
    }
}

    ///             ///
    ///    Task 4   ///
    ///             ///

/**
 * This contract should compile
 * A stack overflow issue
 */
contract StackOverflow {
    function createAsset(
        address currency,
        address settlementCurrency,
        bytes32 marketObjectCodeRateReset,
        uint contractDealDate,
        uint statusDate,
        uint initialExchangeDate,
        uint maturityDate,
        uint purchaseDate,
        uint capitalizationEndDate,
        uint cycleAnchorDateOfInterestPayment,
        uint cycleAnchorDateOfRateReset,
        uint cycleAnchorDateOfScalingIndex,
        uint cycleAnchorDateOfFee,
        int notionalPrincipal,
        int nominalInterestRate,
        int accruedInterest,
        int rateMultiplier
    )
        external
    {
        require(currency != address(0x00), "Invalid currency address");
        require(settlementCurrency != address(0x00), "Invalid settlement currency address");
        require(marketObjectCodeRateReset != bytes32(0x00), "Code rate request is required");
        require(contractDealDate != 0, "Contract deal date can't be empty");
        require(statusDate != 0, "statusDate can't be empty");
        require(initialExchangeDate != 0, "initialExchangeDate can't be empty");
        require(maturityDate != 0, "maturityDate can't be empty");
        require(purchaseDate != 0, "purchaseDate can't be empty");
        require(capitalizationEndDate != 0, "capitalizationEndDate can't be empty");
        require(cycleAnchorDateOfInterestPayment != 0, "cycleAnchorDateOfInterestPayment can't be empty");
        require(cycleAnchorDateOfScalingIndex != 0, "cycleAnchorDateOfScalingIndex can't be empty");
        require(cycleAnchorDateOfFee != 0, "cycleAnchorDateOfFee can't be empty");
        require(notionalPrincipal != 0, "notionalPrincipalnotionalPrincipal can't be empty");
        require(nominalInterestRate != 0, "nominalInterestRate can't be empty");
        require(accruedInterest != 0, "accruedInterest can't be empty");
        require(rateMultiplier != 0, "rateMultiplier can't be empty");
        
        saveDetailsToStorage(
            currency,
            settlementCurrency,
            marketObjectCodeRateReset,
            notionalPrincipal,
            nominalInterestRate,
            accruedInterest,
            rateMultiplier
        );
        
        saveDatesToStorage(
            contractDealDate,
            statusDate,
            initialExchangeDate,
            maturityDate,
            purchaseDate,
            capitalizationEndDate,
            cycleAnchorDateOfInterestPayment,
            cycleAnchorDateOfRateReset,
            cycleAnchorDateOfScalingIndex,
            cycleAnchorDateOfFee
        );
    }
    
    function saveDetailsToStorage(
        address currency,
        address settlementCurrency,
        bytes32 marketObjectCodeRateReset,
        int notionalPrincipal,
        int nominalInterestRate,
        int accruedInterest,
        int rateMultiplier
    )
        internal
    {
        // Mock function
        // skip implementation
    }
    
    function saveDatesToStorage(
        uint contractDealDate,
        uint statusDate,
        uint initialExchangeDate,
        uint maturityDate,
        uint purchaseDate,
        uint capitalizationEndDate,
        uint cycleAnchorDateOfInterestPayment,
        uint cycleAnchorDateOfRateReset,
        uint cycleAnchorDateOfScalingIndex,
        uint cycleAnchorDateOfFee
    )
        internal
    {
        // Mock function
        // skip implementation
    }
}
